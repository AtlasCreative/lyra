--- a/DevPackages/_Index/jsdotlua_jest-fake-timers@3.10.0/jest-fake-timers/src/init.lua
+++ b/DevPackages/_Index/jsdotlua_jest-fake-timers@3.10.0/jest-fake-timers/src/init.lua
@@ -235,6 +235,7 @@
 	local delayTimeMs = (self._engineFrameTime / 1000) + delayTime * 1000
 	local targetTime = self._mockTimeMs + delayTimeMs
 	local timeout = {
+		thread = coroutine.running(),
 		time = targetTime,
 		callback = callback,
 		args = { ... },
@@ -254,10 +255,18 @@
 	return timeout
 end
 
-local function fakeCancel(self, timeout)
-	for i, timeout_ in self._timeouts do
-		if timeout_ == timeout then
-			table.remove(self._timeouts, i)
+local function fakeCancel(self, timeoutOrThread)
+	if typeof(timeoutOrThread) == "thread" then
+		realTask.cancel(timeoutOrThread)
+	end
+	for i, timeout in self._timeouts do
+		if timeout == timeoutOrThread or timeout.thread == timeoutOrThread then
+			-- Some timer advancement functions clone the _timeouts array and
+			-- work on that, which we can't modify here. So we also need to
+			-- clear the callback/args to make sure it doesn't do anything
+			timeout.callback = function() end
+			timeout.args = {}
+			timeout.time = self._mockTimeMs
 			break
 		end
 	end
@@ -266,7 +275,14 @@
 local function fakeWait(self, timeToWait: number?)
 	local running = coroutine.running()
 	local clock = fakeClock(self)
-	fakeDelay(self, timeToWait or 0, function()
+	local timeout
+	timeout = fakeDelay(self, timeToWait or 0, function()
+		if coroutine.status(running) == "dead" then
+			-- This was probably canceled by coroutine.close, which we don't
+			-- mock. We can just treat it like task.cancel and return
+			fakeCancel(self, timeout)
+			return
+		end
 		task.spawn(running, fakeClock(self) - clock)
 	end)
 	return coroutine.yield()
